# Generated by Django 4.2.1 on 2023-06-07 11:02

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=254, verbose_name='name')),
                ('username', models.CharField(max_length=255, unique=True, verbose_name='username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('picture', models.ImageField(default='../static/profile_pictures/3.png', upload_to='user/<django.db.models.fields.CharField>', verbose_name='profile picture')),
                ('phone_number', models.CharField(max_length=15, verbose_name='phone')),
                ('date_of_birth', models.DateField(auto_now_add=True, verbose_name='date of birth')),
                ('balance', models.IntegerField(blank=True, null=True, verbose_name='balance')),
                ('carma', models.IntegerField(blank=True, null=True, verbose_name='carma')),
                ('about', models.TextField(blank=True, null=True, verbose_name='about')),
                ('logged', models.DateTimeField(auto_now=True, verbose_name='last seen')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('groups', models.ManyToManyField(blank=True, related_name='User', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255, verbose_name='full name')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='actors', verbose_name='actor picture')),
                ('info', models.TextField(blank=True, null=True, verbose_name='actor info')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', models.DateField(auto_now=True, verbose_name='updated')),
            ],
            options={
                'verbose_name': 'Actor',
                'verbose_name_plural': 'Actors',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='categories', verbose_name='category picture')),
                ('info', models.TextField(blank=True, null=True, verbose_name='category info')),
                ('position', models.IntegerField(default=20, verbose_name='position')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', models.DateField(auto_now=True, verbose_name='updated')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='Director',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255, verbose_name='full name')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='directors', verbose_name='actor picture')),
                ('info', models.TextField(blank=True, null=True, verbose_name='actor info')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', models.DateField(auto_now=True, verbose_name='updated')),
            ],
            options={
                'verbose_name': 'Director',
                'verbose_name_plural': 'Directors',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='genre')),
                ('info', models.TextField(blank=True, null=True, verbose_name='info')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', models.DateField(auto_now=True, verbose_name='updated')),
            ],
            options={
                'verbose_name': 'Genre',
                'verbose_name_plural': 'Genres',
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_original', models.CharField(max_length=255, verbose_name='original title')),
                ('title_rus', models.CharField(blank=True, max_length=255, null=True, verbose_name='russian title')),
                ('title_eng', models.CharField(blank=True, max_length=255, null=True, verbose_name='english title')),
                ('released', models.CharField(max_length=4, verbose_name='released year')),
                ('picture', models.ImageField(default='movies/pictures/poster.jpg', upload_to='movies/pictures', verbose_name='picture')),
                ('country', models.CharField(blank=True, max_length=255, null=True, verbose_name='country')),
                ('age', models.IntegerField(default=16, verbose_name='age')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('quality', models.CharField(choices=[('SD', 'sd'), ('HD', 'hd'), ('FullHD', 'fullhd')], default='SD', max_length=50, verbose_name='quality')),
                ('budget', models.IntegerField(blank=True, null=True, verbose_name='budget')),
                ('ratingIMDB', models.FloatField(blank=True, null=True, verbose_name='rating IMDB')),
                ('ratingKP', models.FloatField(blank=True, null=True, verbose_name='rating KP')),
                ('status', models.CharField(choices=[('Published', 'published'), ('Not released', 'not released'), ('Canceled', 'canceled')], default='Not released', max_length=50, verbose_name='status')),
                ('manga', models.URLField(blank=True, null=True, verbose_name='manga url')),
                ('file', models.FileField(blank=True, null=True, upload_to='movies/videos', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['MOV', 'avi', 'mp4', 'webm', 'mkv'])], verbose_name='file')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', models.DateField(auto_now=True, verbose_name='updated')),
                ('actors', models.ManyToManyField(blank=True, null=True, to='mainapp.actor', verbose_name='actors')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='author')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='category', to='mainapp.category')),
                ('directors', models.ManyToManyField(blank=True, null=True, to='mainapp.director', verbose_name='director')),
                ('genres', models.ManyToManyField(blank=True, null=True, to='mainapp.genre', verbose_name='genres')),
            ],
            options={
                'verbose_name': 'Movie',
                'verbose_name_plural': 'Movies',
            },
        ),
        migrations.CreateModel(
            name='Permissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', models.DateField(auto_now=True, verbose_name='updated')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problem_type', models.CharField(choices=[('loading', 'loading'), ('other', 'other'), ('quality', 'quality'), ('disinformation', 'disinformation'), ('error', 'error'), ('unacceptable content', 'unacceptable content')], max_length=200, verbose_name='problem type')),
                ('problem_text', models.TextField(verbose_name='problem text')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.movie', verbose_name='movie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_type', models.CharField(max_length=100, verbose_name='Type')),
                ('info', models.TextField(blank=True, null=True, verbose_name='Info')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', models.DateField(auto_now=True, verbose_name='updated')),
                ('permissions', models.ManyToManyField(blank=True, null=True, to='mainapp.permissions', verbose_name='Permissions')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
            },
        ),
        migrations.AddField(
            model_name='director',
            name='movies',
            field=models.ManyToManyField(blank=True, null=True, to='mainapp.movie', verbose_name='movies'),
        ),
        migrations.CreateModel(
            name='Collections',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('info', models.TextField(blank=True, null=True, verbose_name='info')),
                ('movies', models.ManyToManyField(blank=True, null=True, to='mainapp.movie', verbose_name='movies')),
            ],
            options={
                'verbose_name': 'Collection',
                'verbose_name_plural': 'Collections',
            },
        ),
        migrations.CreateModel(
            name='Carousel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='carousel')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('position', models.IntegerField(blank=True, default=10, null=True, verbose_name='position')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', models.DateField(auto_now=True, verbose_name='updated')),
                ('movie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mainapp.movie', verbose_name='movie')),
            ],
            options={
                'verbose_name': 'Carousel',
                'verbose_name_plural': 'Carousels',
                'ordering': ['position'],
            },
        ),
        migrations.AddField(
            model_name='actor',
            name='movies',
            field=models.ManyToManyField(blank=True, null=True, to='mainapp.movie', verbose_name='movies'),
        ),
        migrations.AddField(
            model_name='user',
            name='history',
            field=models.ManyToManyField(blank=True, null=True, to='mainapp.movie', verbose_name='history'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, related_name='User', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
